using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.OleDb;


namespace JobWithDataGridView
{
    public partial class Form1 : Form
    {
        private OleDbConnection asConnection = null;
        private OleDbCommandBuilder asBuilder = null;
        private OleDbDataAdapter asDataAdapter = null;
        private DataSet dataSet = null;
        private string nameTable;
        private bool newRowAdding = false;
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            asConnection = new OleDbConnection(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=Database4.accdb");
            asConnection.Open();
            LoadData();
        }

        private void LoadData()
        {
            try
            {
                nameTable = "פרטים אישיים";
                asDataAdapter = new OleDbDataAdapter($"Select*, 'Delete' as [Command] From [{nameTable}] ",asConnection);
                asBuilder = new OleDbCommandBuilder(asDataAdapter);

                asBuilder.GetInsertCommand();
                asBuilder.GetUpdateCommand();
                asBuilder.GetDeleteCommand();

                dataSet = new DataSet();
                asDataAdapter.Fill(dataSet, nameTable);

                dataGridView1.DataSource = dataSet.Tables[nameTable];

                for (int i=0; i<dataGridView1.Rows.Count;i++)
                {
                    DataGridViewLinkCell linkCell = new DataGridViewLinkCell();
                    dataGridView1[0, i] = linkCell;
                }
            }

            catch(Exception ex)
            {
                MessageBox.Show(ex.Message, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ReloadData()
        {
            try
            {
                dataSet.Tables[nameTable].Clear();
                asDataAdapter.Fill(dataSet, nameTable);

                dataGridView1.DataSource = dataSet.Tables[nameTable];

                for (int i = 0; i < dataGridView1.Rows.Count; i++)
                {
                    DataGridViewLinkCell linkCell = new DataGridViewLinkCell();
                    dataGridView1[0, i] = linkCell;
                }
            }

            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            ReloadData();
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0)
                {
                    string task = dataGridView1.Rows[e.RowIndex].Cells[0].Value.ToString();
                    if (task == "Delete")
                    {
                        if (MessageBox.Show("למחוק השורה הזו?", "מחיקה", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)) 
                        {
                            int rowIndex = e.RowIndex;
                            dataGridView1.Rows.RemoveAt(rowIndex);
                            dataSet.Tables[nameTable].Rows[rowIndex].Delete();
                            asDataAdapter.Update(dataSet, nameTable);

                        }
                    }

                    else if (task == "Insert")
                    {
                        int rowIndex = dataGridView1.Rows.Count - 2;
                        DataRow row = dataSet.Tables[nameTable].NewRow();

                        row["מורה הכיתה"] = dataGridView1.Rows[rowIndex].Cells["מורה הכיתה"].Value;
                        row["רופא המטפל"] = dataGridView1.Rows[rowIndex].Cells["רופא המטפל"].Value;
                        row["תעודת זהות"] = dataGridView1.Rows[rowIndex].Cells["תעודת זהות"].Value;
                        row["שם משפחה"] = dataGridView1.Rows[rowIndex].Cells["שם משפחה"].Value;
                        row["שם פרטי"] = dataGridView1.Rows[rowIndex].Cells["שם פרטי"].Value;

                        dataSet.Tables[nameTable].Rows.Add(row);
                        dataSet.Tables[nameTable].Rows.RemoveAt(dataSet.Tables[nameTable].Rows.Count - 1);
                        dataGridView1.Rows.RemoveAt(dataSet.Tables[nameTable].Rows.Count - 2);
                        dataGridView1.Rows[e.RowIndex].Cells[0].Value = "Delete";
                        asDataAdapter.Update(dataSet, nameTable);
                        newRowAdding = false;
                    }

                    else if (task == "Update")
                    {
                        int r = e.RowIndex;
                        dataSet.Tables[nameTable].Rows[r]["מורה הכיתה"] = dataGridView1.Rows[r].Cells["מורה הכיתה"].Value;
                        dataSet.Tables[nameTable].Rows[r]["רופא המטפל"] = dataGridView1.Rows[r].Cells["רופא המטפל"].Value;
                        dataSet.Tables[nameTable].Rows[r]["תעודת זהות"] = dataGridView1.Rows[r].Cells["תעודת זהות"].Value;
                        dataSet.Tables[nameTable].Rows[r]["שם משפחה"] = dataGridView1.Rows[r].Cells["שם משפחה"].Value;
                        dataSet.Tables[nameTable].Rows[r]["שם פרטי"] = dataGridView1.Rows[r].Cells["שם פרטי"].Value;

                        asDataAdapter.Update(dataSet, nameTable);

                        dataGridView1.Rows[e.RowIndex].Cells[0].Value = "Delete";
                    }
                    ReloadData();
                }
            }

            catch
            {

            }
        }

        private void dataGridView1_UserAddedRow(object sender, DataGridViewRowEventArgs e)
        {
            if (newRowAdding == false)
            {
                newRowAdding = true;
                int lastRow = dataGridView1.Rows.Count - 2;
                DataGridViewRow row = dataGridView1.Rows[lastRow];
                DataGridViewLinkCell linkCell = new DataGridViewLinkCell();
                dataGridView1[0, lastRow] = linkCell;
                row.Cells["Command"].Value = "Insert";
            }
        }

        private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if(newRowAdding == false)
                {
                    int rowIndex = dataGridView1.SelectedCells[0].RowIndex;
                    DataGridViewRow editingRow = dataGridView1.Rows[rowIndex];
                    DataGridViewLinkCell linkCell = new DataGridViewLinkCell();
                    dataGridView1[0, rowIndex] = linkCell;
                    editingRow.Cells["Command"].Value = "Update";
                }
            }
        }

        private void dataGridView1_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            e.Control.KeyPress -= new KeyPressEventHandler(Column_KeyPress);
            if (dataGridView1.CurrentCell.ColumnIndex == 3)
            {
                TextBox textBox = e.Control as TextBox;
                if(textBox != null)
                {
                    textBox.KeyPress += new KeyPressEventHandler(Column_KeyPress);
                }
            }
        }

        private void Column_KeyPress(object sender,KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar)&& !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
            }
        }
    }
}
